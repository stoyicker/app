buildscript {
	repositories {
        google()
        jcenter()
    }
    final def androidPluginVersion = "3.1.4"
    dependencies {
        classpath "com.android.tools.build:gradle:$androidPluginVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$props_kotlinversion"
    }
}

apply plugin: "com.android.application"
apply plugin: "kotlin-android"

android {
    compileSdkVersion Integer.parseInt(props_compilesdkversion)
    buildToolsVersion props_buildtoolsversion
    defaultConfig {
        versionCode Integer.parseInt(props_versioncode)
        versionName props_versioncode
        minSdkVersion props_minsdkversion
        targetSdkVersion props_targetsdkversion
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError true
        absolutePaths true
        checkAllWarnings true
        htmlOutput = new File("$project.buildDir/lint/report.html")
        quiet false
        warningsAsErrors true
    }
    flavorDimensions "product"
    productFlavors {
        dev {
            dimension "product"
        }
        surrenderAt20 {
            dimension "product"
        }
    }
    productFlavors.each {
        it.applicationIdSuffix = "${it.name.toLowerCase(Locale.ENGLISH)}"
    }
    variantFilter { variant ->
        def buildTypeNames = variant.buildType*.name
        def flavorNames = variant.flavors*.name
        if (System.env["CI"] == null && (buildTypeNames.contains("release") || !flavorNames.contains("dev"))) {
            setIgnore(true)
        }
        if (System.env["CI"] != null && (buildTypeNames.contains("debug") || flavorNames.contains("dev"))) {
            setIgnore(true)
        }
    }
}
repositories {
    google()
    jcenter()
}
final def androidxVersion = "1.0.0-rc01"
final def junitVersion = "5.2.0"
dependencies {
    implementation "androidx.appcompat:appcompat:$androidxVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$props_kotlinversion"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}
